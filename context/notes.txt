Problems
  - In Go servers, each new request spawns its own goroutine
  - Goroutine don't have any 'thread local' state
  - Your code is responsible for things like cancellation, timeouts and data

Solution
  - the "context" package 
  - it solves the problem of managing state during a request

Context addresses:
  - request scoped data 
  - cancellation, deadlines and timeouts 
  - share data, it's safe for concurrent use 

Derived Contexts:
  - The context package provides funcs that derive new Context values from existing ones (FUNCTIONAL IMMUTABLE STYLE)
  - These contexts form a tree and when any Context is canceled, ALL contexts derived from it are cancelled too 
  - Provides a mechanism to manage the lifecycle of dependent funcs without a request scoped operation 
  - Cancellation or timeout applies to the current ctx and its subtree

Ctx offers 2 controls:
  - a channel that closes when the cancellation occurs
  - an error that's readable once the channel closes

API
  - package level
    - func Background() Context
      - Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. 
        It is typically used by the main function, initialization, and tests, and as the top-level Context for incoming requests.
    - func TODO() Context
      - TODO returns a non-nil, empty Context. Code should use context.TODO when it's unclear which Context to use or it is 
        not yet available (because the surrounding function has not yet been extended to accept a Context parameter).
    - func WithValue(parent Context, key, val interface{}) Context
      - WithValue returns a copy of parent in which the value associated with key is val.
      - Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.
      - The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions 
        between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when 
        assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables' 
        static type should be a pointer or interface. 
    - func WithCancel(parent Context) Context
      - WithCancel returns a copy of parent with a new Done channel. The returned context's Done channel is closed when the 
        returned cancel function is called or when the parent context's Done channel is closed, whichever happens first.
      - Canceling this context releases resources associated with it, so code should call cancel as soon as the operations 
        running in this Context complete. 
    - func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) 
      - WithDeadline returns a copy of the parent context with the deadline adjusted to be no later than d. If the parent's 
        deadline is already earlier than d, WithDeadline(parent, d) is semantically equivalent to parent. The returned context's 
         Done channel is closed when the deadline expires, when the returned cancel function is called, or when the parent context's 
         Done channel is closed, whichever happens first.
      - Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running 
        in this Context complete. 
    - func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
      - exactly as WithDeadline except that you give it a duration instead of a specific time
  - context object level
    - ctx.Done()
      - returns a channel that gets a signal whenever cancel() function is called or the parent context's Done channel is closed 
    - ctx.Err()
      - returns an error indicating why the context was cancelled 
    - ctx.Deadline()
      - allows a sub-operation to determine if it should start work
      - it returns both: a time value indicating when work should be cancelled along with a boolean indicating if a deadline 
        has been set on the context.
    - ctx.Value(key)
      - return the value associated with the key from a contextWithValue 
      - this is NOT type-safe, you might need to cast what you return: ctx.Value(str).(string)

- Notes
  - Context With Value related
    - ContextWithValue handling is type unsafe and can't be checked at compile time 
    - Essantially a map[interface{}]interface{}
    - usecases: headers, cookies, auth, tokens... (request scoped data)
  - returned cancel() function returned is usually deferred.. so we make sure we release the resource