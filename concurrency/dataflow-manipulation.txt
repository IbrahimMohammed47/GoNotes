

Data generation/collecting/loading 
  - There are all kinds of producer-only modules. A producer-only module worker may produce a data stream
    - by loading a file, reading a database, or crawling the web.
    - by collecting all kinds of metrics from a software system or all kinds of hardware.
    - by generating random numbers.
    - etc.
  -  A data generator may close the output stream channel at any time to end data generating. 


Data aggregation (like Fan-in)
  - A data aggregation module worker aggregates several data streams of the same data type into one stream. 
    Assume the data type is int64, then the following function will aggregate an arbitrary number of data streams into one. 
  - If the number of aggregated data streams is very small (two or three), we can use select block to aggregate these data streams in one goroutine. otherwise, see the following example 
  - example (this example handles closing channel)
    func Aggregator(inputs ...<-chan uint64) <-chan uint64 {
      output := make(chan uint64)
      var wg sync.WaitGroup
      for _, in := range inputs {
        wg.Add(1)
        go func(int <-chan uint64) {
          for {
            x, ok := <-in
            if ok {
              output <- x
            } else {
              wg.Done()
            }
          }
        }(in)
      }
      go func() {
        wg.Wait()
        close(output)
      }()
      return output
    }


Data division (like Fan-out)
  - A data division module worker does the opposite of a data aggregation module worker. It is easy to implement a division worker, 
    but in practice, division workers are not very useful and seldom used. 
  - example
    func divisor(input <-chan uint64, outputs ...chan<- uint64) {
      for _, out := range outputs {
        go func(o chan<- uint64) {
          for e := range input {
            o <- e
          }
          close(o)    // NOTE: this function assumes that NO ONE will close the outputs from the outside, if that was the case, this line would panic
							        // so it's IMPORTANT to define which module is responsible for closing channels
        }(out)
      }
    }


Data composition
  - A data composition worker merges several pieces of data from different input data streams into one piece of data.
    The following is a composition worker example, in which two uint64 values from one stream and one uint64 value from 
    another stream compose one new uint64 value. Surely, these stream channel element types are different generally in practice.     
  - example
    having 3 stream, summing them element-wise(corresponding dequed elements), and put the result into one steam


Data decomposition
  - Data decomposition is the inverse process of data composition. A decomposition worker function implementation takes one input 
    data stream parameter and returns several data stream results. 


Data duplication/proliferation
  - Data duplication (proliferation) can be viewed as special data decompositions. One piece of data will be duplicated and each of 
    the duplicated data will be sent to different output data streams. 


Data calculation/analysis/mapping
  - The functionalities of data calculation and analysis modules vary and each is very specific. Generally, a worker function of such 
    modules transforms each piece of input data into another piece of output data. 
  

Data validation/filtering
  - A data validation or filtering module discards some transferred data in a stream. 
  - example
    func filter(input <-chan uint64, predicate func(uint64)bool) <-chan uint64 {
      output := make(chan uint64)
      go func() {
        for e := range input {
          if predicate(e) {
            output <- e
          }
        }
        close(output) 
      }()
      return output
    }


Data serving/saving
  - Generally, a data serving or saving module is the last or final output module in a data flow system. 
    Here just provides a simple worker which prints each piece of data received from the input stream. 
  - example
    func Printer(input <-chan uint64) {
      for {
        x, ok := <-input
        if ok {
          fmt.Println(x)
        } else {
          return
        }
      }
    }
